---
# Run 'compile_and_test_for_board.py' on connected boards.
#
# This workflow will run on a RYOT machine and lunch all tests on all boards
# currently connected to that machine.
#
# Documentation:
#
# * Setup a RYOT machine:
#   https://github.com/fjmolinas/riot-ryot/blob/master/setup.md
#
# * Requirements (filled by a RYOT machine):
#   * ssh access (required secrets set)
#   * all required flashing tools installed
#   * udev rules that map all BOARD to /dev/riot/tty-$(BOARD)
#   * RIOT_MAKEFILES_GLOBAL_PRE that sets PORT and DEBUG_ADAPTER_ID for each
#     BOARD http://riot-os.org/api/advanced-build-system-tricks.html#multiple-boards-udev
#   * Static list of connected boards or make target listing them in json format
#     so that fromJSON can be used.

name: riot-ryot

on:
  workflow_dispatch:
    inputs:
      riot_version:
        description: 'RIOT version to checkout'
        required: true
        default: 'master'
      riot_remote:
        description: 'The remote RIOT to checkout'
        default: RIOT-OS/RIOT
      applications:
        description: 'List of applications to test, leave empty for all'
        default: 'tests/bloom_bytes'
      boards:
        description: 'JSON array of boards: [\"samr21-xpro\", \"nucleo-l15232\"]'
        default: 'all'
      environment:
        description: 'Environment vars, e.g.: DOCKER_ENVIRONMENT_CMDLINE=\''-e USEMODULE=<name>\'''
        default: ' '
env:
  # RIOT_MAKEFILES_GLOBAL_PRE to set for and DEBUG_ADAPTER_ID per BOARD
  RIOT_MAKEFILES_GLOBAL_PRE: '/builds/conf/makefiles.pre'
  UNIFLASH_PATH: '/opt/ti/uniflash'

jobs:
  connected_boards:
    name: Get Connected Boards
    runs-on: self-hosted
    outputs:
      boards: ${{ steps.input-boards.outputs.boards || steps.ci-connected-boards.outputs.boards }}
    steps:
      # Get all currently connected boards if not passed through an input
      - id: ci-connected-boards
        if: ${{ github.event_name == 'push' || github.event.inputs.boards == 'all'}}
        run: echo "::set-output name=boards::$(make -C /builds/boards/ list-boards-json --no-print-directory)"
      # Use the input BOARDs list
      - id: input-boards
        if: ${{ github.event_name != 'push' && github.event.inputs.boards != 'all'}}
        run: echo "::set-output name=boards::${{ github.event.inputs.boards }}"

  # Runs all tests on connected boards
  compile_and_test_for_board:
    name: ${{ matrix.board }}
    runs-on: self-hosted
    needs: connected_boards
    # ci-riot-tribe has 8 cores, parallelism will depend on actually configured
    # runners
    strategy:
      max-parallel: 7
      fail-fast: false
      matrix:
        board: ${{ fromJson(needs.connected_boards.outputs.boards) }}
    env:
      BUILD_IN_DOCKER: 1
      COMPILE_AND_TEST_FOR_BOARD: /builds/boards/RIOT/dist/tools/compile_and_test_for_board/compile_and_test_for_board.py
      # args for compile_and_test_for_board script
      COMPILE_AND_TEST_ARGS: --with-test-only --report-xml --incremental
      # environment vars for compile_and_test_for_board script to pass
      # USEMODULE and CFLAGS use:
      #    DOCKER_ENVIRONMENT_CMDLINE=\'-e USEMODULE=<name>\'
      #    DOCKER_ENVIRONMENT_CMDLINE=\'-e CFLAGS=-D<flag>\'
      COMPILE_AND_TEST_VARS: ${{ github.event.inputs.environment }}
      APPLICATIONS: ${{ github.event.inputs.applications }}
      # Exclude 'tests/periph_timer_short_relative_set' since its expected
      # to fail on most BOARDs
      APPLICATIONS_EXCLUDE: 'tests/periph_timer_short_relative_set'
    steps:
      - name: Checkout RIOT
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.riot_version }}
          # Make sure it runs git clean -xdff before fetching
          clean: true
          repository: ${{ github.event.inputs.riot_remote }}
      - name: Run compile_and_test_for_board.py
        run: |
          ${COMPILE_AND_TEST_VARS} ${COMPILE_AND_TEST_FOR_BOARD} . \
            ${{ matrix.board }} results-${{ matrix.board }} \
            ${COMPILE_AND_TEST_ARGS} \
            --applications="${APPLICATIONS}" \
            --applications-exclude="${APPLICATIONS_EXCLUDE}"
      - name: Archive results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }}
          path: results-${{ matrix.board }}
