From 99514cf053e59ddbe21313290a0276059ef8606e Mon Sep 17 00:00:00 2001
From: francisco <femolina@uc.cl>
Date: Thu, 4 Apr 2019 10:21:18 +0200
Subject: ucg: patch for st7735 128x128 screen

---
 csrc/ucg.h                        |  2 +-
 csrc/ucg_com_msg_api.c            |  5 ++---
 csrc/ucg_dev_ic_st7735.c          | 24 +++++++++++++-----------
 csrc/ucg_dev_tft_128x160_st7735.c |  6 +++---
 csrc/ucg_init.c                   |  4 ++--
 csrc/ucg_rotate.c                 |  2 +-
 6 files changed, 22 insertions(+), 21 deletions(-)

diff --git a/csrc/ucg.h b/csrc/ucg.h
index 553562c..f92a8b5 100644
--- a/csrc/ucg.h
+++ b/csrc/ucg.h
@@ -384,7 +384,7 @@ struct _ucg_t
   
   /* offset, that is additionally added to UCG_VARX/UCG_VARY */
   /* seems to be required for the Nokia display */
-  // ucg_xy_t display_offset;
+  ucg_xy_t display_offset;
   
   /* data which is passed to the cb procedures */
   /* can be modified by the cb procedures (rotation, clipping, etc) */
diff --git a/csrc/ucg_com_msg_api.c b/csrc/ucg_com_msg_api.c
index 6a2d2fd..7d53616 100644
--- a/csrc/ucg_com_msg_api.c
+++ b/csrc/ucg_com_msg_api.c
@@ -366,8 +366,7 @@ void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
 	//b = data[0];
 	//bb = data[1];
 	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
-	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x)>>lo)))&b)|bb );
-	//data+=2;
+  ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.x+ucg->display_offset.x)>>lo)))&b)|bb );
 	break;
       case 11:
 	data++;
@@ -378,7 +377,7 @@ void ucg_com_SendCmdSeq(ucg_t *ucg, const ucg_pgm_uint8_t *data)
 	//b = data[0];
 	//bb = data[1];
 	ucg_com_SetCDLineStatus(ucg, (ucg->com_cfg_cd)&1 );
-	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y)>>lo)))&b)|bb );
+	ucg_com_SendByte(ucg, (((uint8_t)(((ucg->arg.pixel.pos.y+ucg->display_offset.y)>>lo)))&b)|bb );
 	//data+=2;
 	break;
       case 15:
diff --git a/csrc/ucg_dev_ic_st7735.c b/csrc/ucg_dev_ic_st7735.c
index c9586ab..7e38d6d 100644
--- a/csrc/ucg_dev_ic_st7735.c
+++ b/csrc/ucg_dev_ic_st7735.c
@@ -42,8 +42,8 @@ const ucg_pgm_uint8_t ucg_st7735_set_pos_seq[] =
 {
   UCG_CS(0),					/* enable chip */
   UCG_C11( 0x036, 0x000),
-  UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_A2(0x000, 0x07f),					/* set x position */
-  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x09f),		/* set y position */
+  UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 2),					/* set x position */
+  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 1),		/* set y position */
   UCG_C10(0x02c),							/* write to RAM */
   UCG_DATA(),								/* change to data mode */
   UCG_END()
@@ -59,8 +59,8 @@ const ucg_pgm_uint8_t ucg_st7735_set_pos_dir0_seq[] =
   /* 0x040 horizontal deccrement (dir = 2) */
   /* 0x080 vertical deccrement (dir = 3) */
   UCG_C11( 0x036, 0x000),
-  UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_A2(0x000, 0x07f),					/* set x position */
-  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x09f),		/* set y position */
+  UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 2),					/* set x position */
+  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 1),		/* set y position */
 
   UCG_C10(0x02c),							/* write to RAM */
   UCG_DATA(),								/* change to data mode */
@@ -76,7 +76,7 @@ const ucg_pgm_uint8_t ucg_st7735_set_pos_dir1_seq[] =
   /* 0x080 vertical deccrement (dir = 3) */
   UCG_C11( 0x036, 0x000),
   UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0),					/* set x position */
-  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x09f),		/* set y position */
+  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 1),		/* set y position */
 
   UCG_C10(0x02c),							/* write to RAM */
   UCG_DATA(),								/* change to data mode */
@@ -94,8 +94,8 @@ const ucg_pgm_uint8_t ucg_st7735_set_pos_dir2_seq[] =
   
   UCG_C11( 0x036, 0x040),
   UCG_C11( 0x036, 0x040),			/* it seems that this command needs to be sent twice */
-  UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_A2(0x000, 0x07f),					/* set x position */
-  UCG_C10(0x02b),	UCG_VARY(8,0x01, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x09f),		/* set y position */
+  UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 2),					/* set x position */
+  UCG_C10(0x02b),	UCG_VARY(8,0x01, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 1),		/* set y position */
 
   UCG_C10(0x02c),							/* write to RAM */
   UCG_DATA(),								/* change to data mode */
@@ -113,7 +113,7 @@ const ucg_pgm_uint8_t ucg_st7735_set_pos_dir3_seq[] =
   UCG_C11( 0x036, 0x080),
   UCG_C11( 0x036, 0x080),		/* it seems that this command needs to be sent twice */
   UCG_C10(0x02a),	UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0), UCG_VARX(0,0x00, 0), UCG_VARX(0,0x0ff, 0),					/* set x position */
-  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x09f),		/* set y position */
+  UCG_C10(0x02b),	UCG_VARY(0,0x00, 0), UCG_VARY(0,0x0ff, 0), UCG_A2(0x000, 0x07f + 1),		/* set y position */
 
   UCG_C10(0x02c),							/* write to RAM */
   UCG_DATA(),								/* change to data mode */
@@ -143,7 +143,7 @@ ucg_int_t ucg_handle_st7735_l90fx(ucg_t *ucg)
       case 3: 
       default: 
 	tmp = ucg->arg.pixel.pos.y;
-	ucg->arg.pixel.pos.y = 159-tmp;
+	ucg->arg.pixel.pos.y = 127-tmp;
 	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 	ucg->arg.pixel.pos.y = tmp;
 	break;
@@ -287,7 +287,7 @@ ucg_int_t ucg_handle_st7735_l90se(ucg_t *ucg)
       case 3: 
       default: 
 	tmp = ucg->arg.pixel.pos.y;
-	ucg->arg.pixel.pos.y = 159-tmp;
+	ucg->arg.pixel.pos.y = 127-tmp;
 	ucg_com_SendCmdSeq(ucg, ucg_st7735_set_pos_dir3_seq);	
 	ucg->arg.pixel.pos.y = tmp;
 	break;
@@ -325,13 +325,15 @@ ucg_int_t ucg_dev_ic_st7735_18(ucg_t *ucg, ucg_int_t msg, void *data)
     case UCG_MSG_DEV_POWER_UP:
       /* setup com interface and provide information on the clock speed */
       /* of the serial and parallel interface. Values are nanoseconds. */
+        ucg->display_offset.x = 2;
+        ucg->display_offset.y = 1;
       return ucg_com_PowerUp(ucg, 100, 66);
     case UCG_MSG_DEV_POWER_DOWN:
       ucg_com_SendCmdSeq(ucg, ucg_st7735_power_down_seq);
       return 1;
     case UCG_MSG_GET_DIMENSION:
       ((ucg_wh_t *)data)->w = 128;
-      ((ucg_wh_t *)data)->h = 160;
+      ((ucg_wh_t *)data)->h = 128;
       return 1;
     case UCG_MSG_DRAW_PIXEL:
       if ( ucg_clip_is_pixel_visible(ucg) !=0 )
diff --git a/csrc/ucg_dev_tft_128x160_st7735.c b/csrc/ucg_dev_tft_128x160_st7735.c
index 0f7c52d..b9e1b23 100644
--- a/csrc/ucg_dev_tft_128x160_st7735.c
+++ b/csrc/ucg_dev_tft_128x160_st7735.c
@@ -73,8 +73,8 @@ static const ucg_pgm_uint8_t ucg_tft_128x160_st7735_init_seq[] = {
 
   UCG_C11( 0x036, 0x000),		/* memory control */
   
-  UCG_C14(  0x02a, 0x000, 0x000, 0x000, 0x07f),              /* Horizontal GRAM Address Set */
-  UCG_C14(  0x02b, 0x000, 0x000, 0x000, 0x09f),              /* Vertical GRAM Address Set */
+  UCG_C14(  0x02a, 0x000, 0x000, 0x000, 0x07f + 2),              /* Horizontal GRAM Address Set */
+  UCG_C14(  0x02b, 0x000, 0x000, 0x000, 0x07f + 1),              /* Vertical GRAM Address Set */
   UCG_C10(  0x02c),               /* Write Data to GRAM */
 
   
@@ -102,7 +102,7 @@ ucg_int_t ucg_dev_st7735_18x128x160(ucg_t *ucg, ucg_int_t msg, void *data)
     
     case UCG_MSG_GET_DIMENSION:
       ((ucg_wh_t *)data)->w = 128;
-      ((ucg_wh_t *)data)->h = 160;
+      ((ucg_wh_t *)data)->h = 128;
       return 1;
   }
   
diff --git a/csrc/ucg_init.c b/csrc/ucg_init.c
index da24014..8bcd2fe 100644
--- a/csrc/ucg_init.c
+++ b/csrc/ucg_init.c
@@ -48,8 +48,8 @@ void ucg_init_struct(ucg_t *ucg)
   ucg->is_power_up = 0;
   ucg->rotate_chain_device_cb = 0;
   ucg->arg.scale = 1;
-  //ucg->display_offset.x = 0;
-  //ucg->display_offset.y = 0;
+  ucg->display_offset.x = 0;
+  ucg->display_offset.y = 0;
   ucg->font = 0;
   //ucg->font_mode = UCG_FONT_MODE_NONE;   Old font procedures
   ucg->font_decode.is_transparent = 1;  // new font procedures
diff --git a/csrc/ucg_rotate.c b/csrc/ucg_rotate.c
index 47c195b..71c3603 100644
--- a/csrc/ucg_rotate.c
+++ b/csrc/ucg_rotate.c
@@ -251,6 +251,6 @@ void ucg_SetRotate270(ucg_t *ucg)
   ucg->rotate_chain_device_cb = ucg->device_cb;
   ucg->device_cb = ucg_dev_rotate270;
   ucg_GetDimension(ucg);
-  ucg_SetMaxClipRange(ucg);
+  // ucg_SetMaxClipRange(ucg);
 }
 
-- 
2.21.0

